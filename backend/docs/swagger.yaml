basePath: /api/v1
definitions:
  requests.CreateDocumentRequest:
    properties:
      content:
        type: string
      group_uuid:
        type: string
      name:
        type: string
    type: object
  requests.CreateGroupRequest:
    properties:
      name:
        type: string
    type: object
  requests.LogInRequest:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
  requests.RegRequest:
    properties:
      email:
        type: string
      login:
        type: string
      password:
        type: string
    type: object
  requests.UpdateDocumentRequest:
    properties:
      content:
        type: string
      name:
        type: string
    type: object
  requests.UpdateGroupRequest:
    properties:
      name:
        type: string
    type: object
  requests.UpdateUserRequest:
    properties:
      email:
        type: string
      login:
        type: string
      password:
        type: string
    type: object
  responses.CreateDocumentResponse:
    properties:
      content:
        type: string
      created_at:
        type: string
      group_uuid:
        type: string
      name:
        type: string
      uuid:
        type: string
    type: object
  responses.CreateGroupResponse:
    properties:
      created_at:
        type: string
      name:
        type: string
      uuid:
        type: string
    type: object
  responses.DeleteDocumentResponse:
    properties:
      message:
        type: string
    type: object
  responses.DeleteGroupResponse:
    properties:
      message:
        type: string
    type: object
  responses.DeleteUserResponse:
    properties:
      message:
        type: string
    type: object
  responses.GetAllDocumentsResponse:
    properties:
      documents:
        items:
          $ref: '#/definitions/responses.GetDocumentResponse'
        type: array
    type: object
  responses.GetAllGroupsResponse:
    properties:
      groups:
        items:
          $ref: '#/definitions/responses.GetGroupResponse'
        type: array
    type: object
  responses.GetAllUsersResponse:
    properties:
      users:
        items:
          $ref: '#/definitions/responses.GetUserResponse'
        type: array
    type: object
  responses.GetDocumentResponse:
    properties:
      content:
        type: string
      created_at:
        type: string
      group_uuid:
        type: string
      name:
        type: string
      uuid:
        type: string
    type: object
  responses.GetGroupResponse:
    properties:
      created_at:
        type: string
      name:
        type: string
      uuid:
        type: string
    type: object
  responses.GetUserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      login:
        type: string
      uuid:
        type: string
    type: object
  responses.RegResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      login:
        type: string
      uuid:
        type: string
    type: object
  responses.UpdateDocumentResponse:
    properties:
      content:
        type: string
      created_at:
        type: string
      group_uuid:
        type: string
      name:
        type: string
      uuid:
        type: string
    type: object
  responses.UpdateGroupResponse:
    properties:
      created_at:
        type: string
      name:
        type: string
      uuid:
        type: string
    type: object
  responses.UpdateUserResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      login:
        type: string
      uuid:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API for Team Circus project
  termsOfService: http://swagger.io/terms/
  title: Team Circus API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates user credentials, creates and saves JWT access/refresh
        tokens in cookies.
      parameters:
      - description: User login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.LogInRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid request format
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid credentials
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: User login
      tags:
      - auth
  /auth/logout:
    post:
      description: Expires the JWT access/refresh cookies.
      responses:
        "204":
          description: Logged out successfully
      summary: User logout
      tags:
      - auth
  /auth/refresh:
    post:
      description: Validates the refresh token cookie and issues a new access/refresh
        token pair
      parameters:
      - description: Cookie header containing refreshToken cookie
        in: header
        name: Cookie
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Tokens refreshed successfully
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid or expired refresh token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh access token
      tags:
      - auth
  /documents:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all documents belonging to groups the requesting
        user is a member of
      produces:
      - application/json
      responses:
        "200":
          description: Documents retrieved successfully
          schema:
            $ref: '#/definitions/responses.GetAllDocumentsResponse'
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get all documents
      tags:
      - documents
    post:
      consumes:
      - application/json
      description: Create a new document with the provided group UUID, name and content
      parameters:
      - description: Document creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.CreateDocumentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Document created successfully
          schema:
            $ref: '#/definitions/responses.CreateDocumentResponse'
        "400":
          description: Invalid request format or validation failed
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new document
      tags:
      - documents
  /documents/{uuid}:
    delete:
      consumes:
      - application/json
      description: Delete a specific document by its UUID
      parameters:
      - description: Document UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Document deleted successfully
          schema:
            $ref: '#/definitions/responses.DeleteDocumentResponse'
        "400":
          description: Invalid UUID format
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Document not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a document by UUID
      tags:
      - documents
    get:
      consumes:
      - application/json
      description: Retrieve a specific document by its UUID if the requesting user
        is a member of the owning group
      parameters:
      - description: Document UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Document retrieved successfully
          schema:
            $ref: '#/definitions/responses.GetDocumentResponse'
        "400":
          description: Invalid UUID format
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Access forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Document not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get a document by UUID
      tags:
      - documents
    put:
      consumes:
      - application/json
      description: Update a specific document's name and content by its UUID
      parameters:
      - description: Document UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Document update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateDocumentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Document updated successfully
          schema:
            $ref: '#/definitions/responses.UpdateDocumentResponse'
        "400":
          description: Invalid UUID format or validation failed
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Document not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Update a document by UUID
      tags:
      - documents
  /groups:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all groups the requesting user belongs to
      produces:
      - application/json
      responses:
        "200":
          description: Groups retrieved successfully
          schema:
            $ref: '#/definitions/responses.GetAllGroupsResponse'
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get all groups
      tags:
      - groups
    post:
      consumes:
      - application/json
      description: Create a new group with the provided name
      parameters:
      - description: Group creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.CreateGroupRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Group created successfully
          schema:
            $ref: '#/definitions/responses.CreateGroupResponse'
        "400":
          description: Invalid request format or validation failed
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Create a new group
      tags:
      - groups
  /groups/{uuid}:
    delete:
      consumes:
      - application/json
      description: Delete a specific group by its UUID
      parameters:
      - description: Group UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Group deleted successfully
          schema:
            $ref: '#/definitions/responses.DeleteGroupResponse'
        "400":
          description: Invalid UUID format
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Group not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a group by UUID
      tags:
      - groups
    get:
      consumes:
      - application/json
      description: Retrieve a specific group by its UUID if the requesting user is
        a member
      parameters:
      - description: Group UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Group retrieved successfully
          schema:
            $ref: '#/definitions/responses.GetGroupResponse'
        "400":
          description: Invalid UUID format
          schema:
            additionalProperties: true
            type: object
        "401":
          description: Authentication required
          schema:
            additionalProperties: true
            type: object
        "403":
          description: Access forbidden
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Group not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get a group by UUID
      tags:
      - groups
    put:
      consumes:
      - application/json
      description: Update a specific group's name by its UUID
      parameters:
      - description: Group UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: Group update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateGroupRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Group updated successfully
          schema:
            $ref: '#/definitions/responses.UpdateGroupResponse'
        "400":
          description: Invalid UUID format or validation failed
          schema:
            additionalProperties: true
            type: object
        "404":
          description: Group not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Update a group by UUID
      tags:
      - groups
  /signup:
    post:
      consumes:
      - application/json
      description: Register a new user with the provided login, email and password
      parameters:
      - description: User registration request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.RegRequest'
      produces:
      - application/json
      responses:
        "201":
          description: User registered successfully
          schema:
            $ref: '#/definitions/responses.RegResponse'
        "400":
          description: Invalid request format or validation failed
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Register a new user
      tags:
      - registration
  /users:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all users
      produces:
      - application/json
      responses:
        "200":
          description: Users retrieved successfully
          schema:
            $ref: '#/definitions/responses.GetAllUsersResponse'
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get all users
      tags:
      - users
  /users/{uuid}:
    delete:
      consumes:
      - application/json
      description: Delete a specific user by their UUID
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User deleted successfully
          schema:
            $ref: '#/definitions/responses.DeleteUserResponse'
        "400":
          description: Invalid UUID format
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Delete a user by UUID
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieve a specific user by their UUID
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User retrieved successfully
          schema:
            $ref: '#/definitions/responses.GetUserResponse'
        "400":
          description: Invalid UUID format
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Get a user by UUID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a specific user's login, email and password by their UUID
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: User update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: User updated successfully
          schema:
            $ref: '#/definitions/responses.UpdateUserResponse'
        "400":
          description: Invalid UUID format or validation failed
          schema:
            additionalProperties: true
            type: object
        "404":
          description: User not found
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal server error
          schema:
            additionalProperties: true
            type: object
      summary: Update a user by UUID
      tags:
      - users
swagger: "2.0"
