version: '3'

tasks:
  default:
    desc: List available tasks
    cmds:
      - task --list-all

  copy:env:
    desc: Copy default env vars
    cmds:
      - cp .env.sample .env
    silent: false

  copy:env:optional:
     desc: Ensure .env exists
     cmds:
      - |
        if [ ! -f .env ]; then
          echo ".env not found, copying from .env.sample"
          cp .env.sample .env
        else
          echo ".env already exists"
        fi

  lint:
    desc: Run local linter config 
    cmds:
      - golangci-lint run

  run:
    desc: Run in debug mode
    dotenv: [".env"]
    cmds:
      - go run cmd/main.go

  build:
    desc: Build the binary
    cmds:
      - go build -o ./bin/backend cmd/main.go

  test:func:build:
    desc: Build functional tests
    cmds:
      - docker compose -f docker-compose.test.yml build
  
  test:func:up:
    desc: Start functional tests
    cmds:
      - docker compose -f docker-compose.test.yml up -d

  test:func:down:
    desc: Stop functional tests
    cmds:
      - docker compose -f docker-compose.test.yml down

  test:func:run:
    desc: Run functional tests
    cmds:
      - go test {{.CLI_ARGS | default "./tests/api/..."}} -v -tags=func_test

  test:func:
    desc: Run functional tests
    cmds:
      - task: test:func:up
      - sleep 2
      - defer: task test:func:down
      - task: test:func:run

  back:test:func:
    desc: Run functional tests
    cmds:
      - task: test:func:up
      - sleep 2
      - defer: task test:func:down
      - task: test:func:run

  back:test:func:up:
    desc: Start functional test dependencies
    cmds:
      - docker compose -f docker-compose.test.yml up -d

  back:test:func:run:
    desc: Run functional tests
    cmds:
      - go test {{.CLI_ARGS | default "./tests/api/..."}} -v -tags=func_test

  back:test:func:down:
    desc: Stop functional test dependencies
    cmds:
      - docker compose -f docker-compose.test.yml down

  test:unit:
    desc: Run unit tests
    cmds:
      - go test {{.CLI_ARGS | default "./tests/unit/..."}} -v -tags=unit_test

  back:test:unit:
    desc: Run unit tests
    cmds:
      - go test {{.CLI_ARGS | default "./tests/unit/..."}} -v -tags=unit_test 

  install:
    desc: Install dependencies
    cmds:
      - task: install:linter
      - task: install:swagger

  install:linter:
    desc: Install linter
    cmds:
      - go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.1.6

  install:swagger:
    desc: Install Swagger tools
    cmds:
      - go install github.com/swaggo/swag/cmd/swag@v1.8.12

  tidy:
    desc: Tidy go modules
    cmds:
      - go mod tidy

  vendor:
    desc: Create vendor directory
    cmds:
      - go mod vendor

  download:
    desc: Download dependencies
    cmds:
      - go mod download

  install:migrator:
    desc: Install migrator
    cmds:
      - go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@v4.16.2

  
  db:migrate:up:
    desc: Run migrations
    cmds:
      - migrate -database "${DB_DRIVER}://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable" -path db/migrations up

  db:migrate:down:
    desc: Run database migrations down
    cmds:
      - migrate -database "${DB_DRIVER}://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable" -path db/migrations down

  db:migrate:create:
    desc: Create new migration file
    cmds:
      - go run -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@v4.16.2 create -ext sql -dir ./db/migrations -seq {{.CLI_ARGS}}

  swagger:generate:
    desc: Generate Swagger documentation
    cmds:
      - go run github.com/swaggo/swag/cmd/swag@v1.8.12 init -g cmd/main.go -o ./docs

  swagger:serve:
    desc: Serve Swagger documentation locally
    cmds:
      - echo "Swagger documentation will be available at http://localhost:8080/swagger/index.html"
      - echo "Make sure the server is running with 'task run'"

  swagger:validate:
    desc: Validate Swagger annotations
    cmds:
      - go run github.com/swaggo/swag/cmd/swag@v1.8.12 fmt -g cmd/main.go
      - go run github.com/swaggo/swag/cmd/swag@v1.8.12 init -g cmd/main.go -o ./docs --parseDependency --parseInternal
